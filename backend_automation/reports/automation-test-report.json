{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-06T03:51:22.695Z",
    "end": "2024-09-06T03:51:25.950Z",
    "duration": 3255,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "72fe5b01-6275-4d6d-a26f-a47d13c1871a",
      "title": "",
      "fullFile": "C:\\Users\\arnav\\automation\\backend_automation\\api.test.mjs",
      "file": "\\api.test.mjs",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7bc2d397-9c86-434f-9307-872d68239539",
          "title": "JSONPlaceholder API Tests",
          "fullFile": "C:\\Users\\arnav\\automation\\backend_automation\\api.test.mjs",
          "file": "\\api.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET REQUEST",
              "fullTitle": "JSONPlaceholder API Tests GET REQUEST",
              "timedOut": false,
              "duration": 690,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${baseURL}/posts/${ID}`);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('id', 1);\nexpect(response.data).to.have.property('title');\nexpect(response.data).to.have.property('body');",
              "err": {},
              "uuid": "f43324e7-9d0e-41ff-a0b8-ff02a2e89753",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST VALID DATA",
              "fullTitle": "JSONPlaceholder API Tests POST VALID DATA",
              "timedOut": false,
              "duration": 448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPost = {\n    title: 'Ritwik Sinha',\n    body: 'this is body',\n    userId: 1\n};\nconst response = await axios.post(`${baseURL}/posts`, newPost);\nassert.strictEqual(response.status, 201);\nassert.strictEqual(response.data.title, 'Ritwik Sinha');\nassert.strictEqual(response.data.body, 'this is body');\nassert.strictEqual(response.data.userId, 1);",
              "err": {},
              "uuid": "6a5cf56d-0d33-41e5-aef5-5382ad216948",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST EMPTY DATA",
              "fullTitle": "JSONPlaceholder API Tests POST EMPTY DATA",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPost = {\n    title: '',\n    body: '',\n    userId: ''\n};\nconst response = await axios.post(`${baseURL}/posts`, newPost);\nassert.strictEqual(response.status, 201);\nassert.strictEqual(response.data.title, '');\nassert.strictEqual(response.data.body, '');\nassert.strictEqual(response.data.userId, '');",
              "err": {},
              "uuid": "7d7e9563-d53f-489b-9466-3a7e7c2869cb",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST INVALID DATA",
              "fullTitle": "JSONPlaceholder API Tests POST INVALID DATA",
              "timedOut": false,
              "duration": 276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPost = {\n    title: '',\n};\ntry {\n    const response = await axios.post(`${baseURL}/posts`, newPost);\n    assert.strictEqual(response.status, 201);\n} catch (error) {\n    assert.include(error.message, \"Invalid request\");\n}",
              "err": {},
              "uuid": "d0c968aa-1ba4-4251-af96-37fcbfd2f9de",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT WITH VALID DATA",
              "fullTitle": "JSONPlaceholder API Tests PUT WITH VALID DATA",
              "timedOut": false,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const existingPost = {\n    id: 1,\n    title: 'Ajay Anand',\n    userId: 1\n};\nconst updatedPost = {\n    id: existingPost.id,\n    title: existingPost.title,\n    body: 'Goodbye World!',\n    userId: existingPost.userId\n};\nconst response = await axios.put(`${baseURL}/posts/${ID}`, updatedPost);\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('id', 1);\nexpect(response.data).to.have.property('title', 'Ajay Anand');\nexpect(response.data).to.have.property('body', 'Goodbye World!');",
              "err": {},
              "uuid": "b3b759b0-97f8-44a2-8e86-b53fa22336ee",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT WITH INVALID ID",
              "fullTitle": "JSONPlaceholder API Tests PUT WITH INVALID ID",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let invalidID = 432\nconst existingPost = {\n    id: invalidID,\n    title: 'Ajay Anand',\n    userId: 1\n};\nconst updatedPost = {\n    id: existingPost.id,\n    title: existingPost.title,\n    body: 'Goodbye World!',\n    userId: existingPost.userId\n};\ntry {\n    const response = await axios.put(`${baseURL}/posts/${ID}`, updatedPost);\n    expect(response.status).to.equal(200);\n} catch (error) {\n    assert.include(error.message, \"Invalid request\");\n}",
              "err": {},
              "uuid": "08231995-e664-48a5-ba47-987706889e9b",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT WITH INVALID DATA",
              "fullTitle": "JSONPlaceholder API Tests PUT WITH INVALID DATA",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedPost = {\n    body: 'empty',\n};\ntry {\n    const response = await axios.put(`${baseURL}/posts/${ID}`, updatedPost);\n    expect(response.status).to.equal(200);\n} catch (error) {\n    assert.include(error.message, \"Invalid request\");\n}",
              "err": {},
              "uuid": "bb4ed5e3-1d06-4639-bf02-3b67e68055b6",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE WITH VALID ID",
              "fullTitle": "JSONPlaceholder API Tests DELETE WITH VALID ID",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const response = await axios.delete(`${baseURL}/posts/${ID}`);\n    expect(response.status).to.equal(200);\n} catch (error) {\n    assert.include(error.message, \"Invalid request\");\n}",
              "err": {},
              "uuid": "2c25ea33-ffe7-4f2d-bad5-004912333f77",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE WITH INVALID ID",
              "fullTitle": "JSONPlaceholder API Tests DELETE WITH INVALID ID",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let id = ''\ntry {\n    const response = await axios.delete(`${baseURL}/posts/${id}`);\n    expect(response.status).to.equal(200);\n} catch (error) {\n    expect(error.response.status).to.equal(404);\n}",
              "err": {},
              "uuid": "14e7999b-73d0-481e-b55e-7c9436bfe897",
              "parentUUID": "7bc2d397-9c86-434f-9307-872d68239539",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f43324e7-9d0e-41ff-a0b8-ff02a2e89753",
            "6a5cf56d-0d33-41e5-aef5-5382ad216948",
            "7d7e9563-d53f-489b-9466-3a7e7c2869cb",
            "d0c968aa-1ba4-4251-af96-37fcbfd2f9de",
            "b3b759b0-97f8-44a2-8e86-b53fa22336ee",
            "08231995-e664-48a5-ba47-987706889e9b",
            "bb4ed5e3-1d06-4639-bf02-3b67e68055b6",
            "2c25ea33-ffe7-4f2d-bad5-004912333f77",
            "14e7999b-73d0-481e-b55e-7c9436bfe897"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "automation-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./reports",
        "reportFilename": "automation-test-report"
      },
      "version": "6.2.0"
    }
  }
}